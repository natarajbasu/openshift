apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: >
      {"apiVersion":"tekton.dev/v1beta1","kind":"Pipeline","metadata":{"annotations":{},"name":"nodejs-test-pipeline","namespace":"hackathon2023-prometheus"},"spec":{"tasks":[{"name":"fetch-repository","params":[{"name":"url","value":"https://github.com/natarajbasu/redHatHackathon"},{"name":"subdirectory","value":""},{"name":"deleteExisting","value":"true"}],"taskRef":{"kind":"ClusterTask","name":"git-clone"},"workspaces":[{"name":"output","workspace":"shared-workspace"}]},{"name":"build","params":[{"name":"IMAGE","value":"image-registry.openshift-image-registry.svc:5000/nodejs-pipeline/nodejs:1.0"},{"name":"TLSVERIFY","value":"false"}],"runAfter":["fetch-repository"],"taskRef":{"kind":"ClusterTask","name":"s2i-nodejs"},"workspaces":[{"name":"source","workspace":"shared-workspace"}]},{"name":"fetch-config-repository","params":[{"name":"url","value":"https://github.com/natarajbasu/redHatHackathon"},{"name":"subdirectory","value":""},{"name":"deleteExisting","value":"true"}],"runAfter":["build"],"taskRef":{"kind":"ClusterTask","name":"git-clone"},"workspaces":[{"name":"output","workspace":"shared-workspace"}]},{"name":"apply-manifests","runAfter":["fetch-config-repository"],"taskRef":{"kind":"Task","name":"apply-manifests"},"workspaces":[{"name":"output","workspace":"shared-workspace"}]}],"workspaces":[{"name":"shared-workspace"}]}}
    pipeline.openshift.io/started-by: 'IAM#nataraj.basu@in.ibm.com'
  resourceVersion: '172134355'
  name: nodejs-test-pipeline-x6dlvv
  uid: aa522079-0612-41c2-a9cb-d367194afff8
  creationTimestamp: '2023-06-09T15:04:32Z'
  generation: 1
  managedFields:
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:pipeline.openshift.io/started-by': {}
          'f:labels':
            .: {}
            'f:tekton.dev/pipeline': {}
        'f:spec':
          .: {}
          'f:params': {}
          'f:pipelineRef':
            .: {}
            'f:name': {}
          'f:resources': {}
          'f:status': {}
          'f:workspaces': {}
      manager: Mozilla
      operation: Update
      time: '2023-06-09T15:04:32Z'
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            'f:kubectl.kubernetes.io/last-applied-configuration': {}
      manager: openshift-pipelines-controller
      operation: Update
      time: '2023-06-09T15:04:32Z'
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:status':
          .: {}
          'f:completionTime': {}
          'f:conditions': {}
          'f:pipelineSpec':
            .: {}
            'f:params': {}
            'f:tasks': {}
            'f:workspaces': {}
          'f:startTime': {}
          'f:taskRuns':
            .: {}
            'f:nodejs-test-pipeline-x6dlvv-apply-manifests':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskSpec':
                  .: {}
                  'f:params': {}
                  'f:steps': {}
                  'f:workspaces': {}
            'f:nodejs-test-pipeline-x6dlvv-build':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskResults': {}
                'f:taskSpec':
                  .: {}
                  'f:description': {}
                  'f:params': {}
                  'f:results': {}
                  'f:steps': {}
                  'f:volumes': {}
                  'f:workspaces': {}
            'f:nodejs-test-pipeline-x6dlvv-fetch-repository':
              .: {}
              'f:pipelineTaskName': {}
              'f:status':
                .: {}
                'f:completionTime': {}
                'f:conditions': {}
                'f:podName': {}
                'f:startTime': {}
                'f:steps': {}
                'f:taskResults': {}
                'f:taskSpec':
                  .: {}
                  'f:description': {}
                  'f:params': {}
                  'f:results': {}
                  'f:steps': {}
                  'f:workspaces': {}
      manager: openshift-pipelines-controller
      operation: Update
      subresource: status
      time: '2023-06-09T15:12:18Z'
  namespace: hackathon2023-prometheus
  labels:
    tekton.dev/pipeline: nodejs-test-pipeline
spec:
  params:
    - name: context.pipelineRun.namespace
      value: hackathon2023-prometheus
  pipelineRef:
    name: nodejs-test-pipeline
  serviceAccountName: pipeline
  timeout: 1h0m0s
  workspaces:
    - name: shared-workspace
      persistentVolumeClaim:
        claimName: build-source-pvc
status:
  completionTime: '2023-06-09T15:12:18Z'
  conditions:
    - lastTransitionTime: '2023-06-09T15:12:18Z'
      message: 'Tasks Completed: 3 (Failed: 0, Cancelled 0), Skipped: 0'
      reason: Succeeded
      status: 'True'
      type: Succeeded
  pipelineSpec:
    params:
      - default: hackathon2023-prometheus
        name: context.pipelineRun.namespace
        type: string
    tasks:
      - name: fetch-repository
        params:
          - name: url
            value: 'https://github.com/natarajbasu/redHatHackathon'
          - name: subdirectory
            value: ''
          - name: deleteExisting
            value: 'true'
        taskRef:
          kind: ClusterTask
          name: git-clone
        workspaces:
          - name: output
            workspace: shared-workspace
        status:
          completionTime: '2023-06-09T15:04:56Z'
          conditions:
            - lastTransitionTime: '2023-06-09T15:04:56Z'
              message: All Steps have completed executing
              reason: Succeeded
              status: 'True'
              type: Succeeded
          podName: nodejs-test-pipeline-x6dlvv-fetch-repository-pod
          startTime: '2023-06-09T15:04:32Z'
          steps:
            - container: step-clone
              imageID: >-
                registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:6c3980b3d28c8fb92b17466f5654d5f484ab893f1673ec8f29e49c0d03f8aca9
              name: clone
              terminated:
                containerID: >-
                  cri-o://1c0bd1e5b978fa3d98b8bb98ff39472fd007c16eda3cf424435fce532ba74333
                exitCode: 0
                finishedAt: '2023-06-09T15:04:55Z'
                message: >-
                  [{"key":"commit","value":"6886767e9ef00d472a214cb9022d1d531ec6cd32","type":1},{"key":"url","value":"https://github.com/natarajbasu/redHatHackathon","type":1}]
                reason: Completed
                startedAt: '2023-06-09T15:04:54Z'
          taskResults:
            - name: commit
              type: string
              value: 6886767e9ef00d472a214cb9022d1d531ec6cd32
            - name: url
              type: string
              value: 'https://github.com/natarajbasu/redHatHackathon'
          taskSpec:
            description: >-
              These Tasks are Git tasks to work with repositories used by other
              tasks in your Pipeline.

              The git-clone Task will clone a repo from the provided url into
              the output Workspace. By default the repo will be cloned into the
              root of your Workspace. You can clone into a subdirectory by
              setting this Task's subdirectory param. This Task also supports
              sparse checkouts. To perform a sparse checkout, pass a list of
              comma separated directory patterns to this Task's
              sparseCheckoutDirectories param.
            params:
              - description: Repository URL to clone from.
                name: url
                type: string
              - default: ''
                description: 'Revision to checkout. (branch, tag, sha, ref, etc...)'
                name: revision
                type: string
              - default: ''
                description: Refspec to fetch before checking out revision.
                name: refspec
                type: string
              - default: 'true'
                description: Initialize and fetch git submodules.
                name: submodules
                type: string
              - default: '1'
                description: >-
                  Perform a shallow clone, fetching only the most recent N
                  commits.
                name: depth
                type: string
              - default: 'true'
                description: >-
                  Set the `http.sslVerify` global git config. Setting this to
                  `false` is not advised unless you are sure that you trust your
                  git remote.
                name: sslVerify
                type: string
              - default: ca-bundle.crt
                description: >-
                  file name of mounted crt using ssl-ca-directory workspace.
                  default value is ca-bundle.crt.
                name: crtFileName
                type: string
              - default: ''
                description: >-
                  Subdirectory inside the `output` Workspace to clone the repo
                  into.
                name: subdirectory
                type: string
              - default: ''
                description: >-
                  Define the directory patterns to match or exclude when
                  performing a sparse checkout.
                name: sparseCheckoutDirectories
                type: string
              - default: 'true'
                description: >-
                  Clean out the contents of the destination directory if it
                  already exists before cloning.
                name: deleteExisting
                type: string
              - default: ''
                description: HTTP proxy server for non-SSL requests.
                name: httpProxy
                type: string
              - default: ''
                description: HTTPS proxy server for SSL requests.
                name: httpsProxy
                type: string
              - default: ''
                description: Opt out of proxying HTTP/HTTPS requests.
                name: noProxy
                type: string
              - default: 'true'
                description: >-
                  Log the commands that are executed during `git-clone`'s
                  operation.
                name: verbose
                type: string
              - default: >-
                  registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:6c3980b3d28c8fb92b17466f5654d5f484ab893f1673ec8f29e49c0d03f8aca9
                description: The image providing the git-init binary that this Task runs.
                name: gitInitImage
                type: string
              - default: /tekton/home
                description: |
                  Absolute path to the user's home directory.
                name: userHome
                type: string
            results:
              - description: The precise commit SHA that was fetched by this Task.
                name: commit
                type: string
              - description: The precise URL that was fetched by this Task.
                name: url
                type: string
            steps:
              - env:
                  - name: HOME
                    value: /tekton/home
                  - name: PARAM_URL
                    value: 'https://github.com/natarajbasu/redHatHackathon'
                  - name: PARAM_REVISION
                  - name: PARAM_REFSPEC
                  - name: PARAM_SUBMODULES
                    value: 'true'
                  - name: PARAM_DEPTH
                    value: '1'
                  - name: PARAM_SSL_VERIFY
                    value: 'true'
                  - name: PARAM_CRT_FILENAME
                    value: ca-bundle.crt
                  - name: PARAM_SUBDIRECTORY
                  - name: PARAM_DELETE_EXISTING
                    value: 'true'
                  - name: PARAM_HTTP_PROXY
                  - name: PARAM_HTTPS_PROXY
                  - name: PARAM_NO_PROXY
                  - name: PARAM_VERBOSE
                    value: 'true'
                  - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
                  - name: PARAM_USER_HOME
                    value: /tekton/home
                  - name: WORKSPACE_OUTPUT_PATH
                    value: /workspace/output
                  - name: WORKSPACE_SSH_DIRECTORY_BOUND
                    value: 'false'
                  - name: WORKSPACE_SSH_DIRECTORY_PATH
                  - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
                    value: 'false'
                  - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
                  - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
                    value: 'false'
                  - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
                image: >-
                  registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:6c3980b3d28c8fb92b17466f5654d5f484ab893f1673ec8f29e49c0d03f8aca9
                name: clone
                resources: {}
                script: >
                  #!/usr/bin/env sh

                  set -eu


                  if [ "${PARAM_VERBOSE}" = "true" ] ; then
                    set -x
                  fi



                  if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ;
                  then
                    cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                    cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                    chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                    chmod 400 "${PARAM_USER_HOME}/.gitconfig"
                  fi


                  if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                    cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                    chmod 700 "${PARAM_USER_HOME}"/.ssh
                    chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
                  fi


                  if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
                     export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
                     if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
                        export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
                     fi
                  fi

                  CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"


                  cleandir() {
                    # Delete any existing contents of the repo directory if it exists.
                    #
                    # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                    # or the root of a mounted volume.
                    if [ -d "${CHECKOUT_DIR}" ] ; then
                      # Delete non-hidden files and directories
                      rm -rf "${CHECKOUT_DIR:?}"/*
                      # Delete files and directories starting with . but excluding ..
                      rm -rf "${CHECKOUT_DIR}"/.[!.]*
                      # Delete files and directories starting with .. plus any other character
                      rm -rf "${CHECKOUT_DIR}"/..?*
                    fi
                  }


                  if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                    cleandir
                  fi


                  test -z "${PARAM_HTTP_PROXY}" || export
                  HTTP_PROXY="${PARAM_HTTP_PROXY}"

                  test -z "${PARAM_HTTPS_PROXY}" || export
                  HTTPS_PROXY="${PARAM_HTTPS_PROXY}"

                  test -z "${PARAM_NO_PROXY}" || export
                  NO_PROXY="${PARAM_NO_PROXY}"


                  /ko-app/git-init \
                    -url="${PARAM_URL}" \
                    -revision="${PARAM_REVISION}" \
                    -refspec="${PARAM_REFSPEC}" \
                    -path="${CHECKOUT_DIR}" \
                    -sslVerify="${PARAM_SSL_VERIFY}" \
                    -submodules="${PARAM_SUBMODULES}" \
                    -depth="${PARAM_DEPTH}" \
                    -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
                  cd "${CHECKOUT_DIR}"

                  RESULT_SHA="$(git rev-parse HEAD)"

                  EXIT_CODE="$?"

                  if [ "${EXIT_CODE}" != 0 ] ; then
                    exit "${EXIT_CODE}"
                  fi

                  printf "%s" "${RESULT_SHA}" > "/tekton/results/commit"

                  printf "%s" "${PARAM_URL}" > "/tekton/results/url"
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 65532
            workspaces:
              - description: >-
                  The git repo will be cloned onto the volume backing this
                  Workspace.
                name: output
              - description: >
                  A .ssh directory with private key, known_hosts, config, etc.
                  Copied to

                  the user's home before git commands are executed. Used to
                  authenticate

                  with the git remote when performing the clone. Binding a
                  Secret to this

                  Workspace is strongly recommended over other volume types.
                name: ssh-directory
                optional: true
              - description: >
                  A Workspace containing a .gitconfig and .git-credentials file.
                  These

                  will be copied to the user's home before any git commands are
                  run. Any

                  other files in this Workspace are ignored. It is strongly
                  recommended

                  to use ssh-directory over basic-auth whenever possible and to
                  bind a

                  Secret to this Workspace over other volume types.
                name: basic-auth
                optional: true
              - description: >
                  A workspace containing CA certificates, this will be used by
                  Git to

                  verify the peer with when fetching or pushing over HTTPS.
                name: ssl-ca-directory
                optional: true
          duration: 24s
          reason: Succeeded
      - name: build
        params:
          - name: IMAGE
            value: >-
              image-registry.openshift-image-registry.svc:5000/hackathon2023-prometheus/trav-reco-ui
          - name: TLSVERIFY
            value: 'false'
        runAfter:
          - fetch-repository
        taskRef:
          kind: ClusterTask
          name: s2i-nodejs
        workspaces:
          - name: source
            workspace: shared-workspace
        status:
          completionTime: '2023-06-09T15:11:29Z'
          conditions:
            - lastTransitionTime: '2023-06-09T15:11:29Z'
              message: All Steps have completed executing
              reason: Succeeded
              status: 'True'
              type: Succeeded
          podName: nodejs-test-pipeline-x6dlvv-build-pod
          startTime: '2023-06-09T15:04:56Z'
          steps:
            - container: step-generate
              imageID: >-
                registry.redhat.io/ocp-tools-4-tech-preview/source-to-image-rhel8@sha256:98d8cb3a255641ca6a1bce854e5e2460c20de9fb9b28e3cc67eb459f122873dd
              name: generate
              terminated:
                containerID: >-
                  cri-o://590deb452dc3718781be6a9764d7c1d5d5dc8cec927a293af1e8ba862859a229
                exitCode: 0
                finishedAt: '2023-06-09T15:05:42Z'
                reason: Completed
                startedAt: '2023-06-09T15:05:41Z'
            - container: step-build-and-push
              imageID: >-
                registry.redhat.io/rhel8/buildah@sha256:7678ad61e06e442b0093ab73faa73ce536721ae523015dd942f9196c4699a31d
              name: build-and-push
              terminated:
                containerID: >-
                  cri-o://2f0e5c821a5ea0ccc36cf3de3c207c2500917e0d0b600580246da5620929a577
                exitCode: 0
                finishedAt: '2023-06-09T15:11:29Z'
                message: >-
                  [{"key":"IMAGE_DIGEST","value":"sha256:aa99dca83a26d183e3e0127244d52c81a5eec60ad085909f81e75540b076487e","type":1}]
                reason: Completed
                startedAt: '2023-06-09T15:05:43Z'
          taskResults:
            - name: IMAGE_DIGEST
              type: string
              value: >-
                sha256:aa99dca83a26d183e3e0127244d52c81a5eec60ad085909f81e75540b076487e
          taskSpec:
            description: >-
              s2i-nodejs task clones a Git repository and builds and pushes a
              container image using S2I and a nodejs builder image.
            params:
              - default: latest
                description: The tag of nodejs imagestream for nodejs version
                name: VERSION
                type: string
              - default: .
                description: The location of the path to run s2i from.
                name: PATH_CONTEXT
                type: string
              - default: 'true'
                description: >-
                  Verify the TLS on the registry endpoint (for push/pull to a
                  non-TLS registry)
                name: TLSVERIFY
                type: string
              - description: Location of the repo where image has to be pushed
                name: IMAGE
                type: string
              - default: >-
                  registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
                description: The location of the buildah builder image.
                name: BUILDER_IMAGE
                type: string
              - default: 'false'
                description: Skip pushing the built image
                name: SKIP_PUSH
                type: string
              - default: []
                description: Environment variables to set during _build-time_.
                name: ENV_VARS
                type: array
            results:
              - description: Digest of the image just built.
                name: IMAGE_DIGEST
                type: string
            steps:
              - env:
                  - name: HOME
                    value: /tekton/home
                image: >-
                  registry.redhat.io/ocp-tools-4-tech-preview/source-to-image-rhel8@sha256:98d8cb3a255641ca6a1bce854e5e2460c20de9fb9b28e3cc67eb459f122873dd
                name: generate
                resources: {}
                script: >
                  echo "Processing Build Environment Variables"

                  echo "" > /env-vars/env-file

                  for var in "$@"

                  do
                      echo "$var" >> /env-vars/env-file
                  done


                  s2i build .
                  image-registry.openshift-image-registry.svc:5000/openshift/nodejs:latest
                  \

                  --as-dockerfile /gen-source/Dockerfile.gen --environment-file
                  /env-vars/env-file
                volumeMounts:
                  - mountPath: /gen-source
                    name: gen-source
                  - mountPath: /env-vars
                    name: env-vars
                workingDir: /workspace/source
              - image: >-
                  registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
                name: build-and-push
                resources: {}
                script: >
                  buildah bud --storage-driver=vfs --tls-verify=false \
                     --layers -f /gen-source/Dockerfile.gen -t image-registry.openshift-image-registry.svc:5000/hackathon2023-prometheus/trav-reco-ui .

                  [[ "false" == "true" ]] && echo "Push skipped" && exit 0

                  [[ "false" == "true" ]] && export DOCKER_CONFIG=""

                  buildah push --storage-driver=vfs --tls-verify=false \
                    --digestfile /workspace/source/image-digest image-registry.openshift-image-registry.svc:5000/hackathon2023-prometheus/trav-reco-ui \
                    docker://image-registry.openshift-image-registry.svc:5000/hackathon2023-prometheus/trav-reco-ui

                  cat /workspace/source/image-digest | tee
                  /tekton/results/IMAGE_DIGEST
                securityContext:
                  capabilities:
                    add:
                      - SETFCAP
                volumeMounts:
                  - mountPath: /var/lib/containers
                    name: varlibcontainers
                  - mountPath: /gen-source
                    name: gen-source
                workingDir: /gen-source
            volumes:
              - emptyDir: {}
                name: varlibcontainers
              - emptyDir: {}
                name: gen-source
              - emptyDir: {}
                name: env-vars
            workspaces:
              - mountPath: /workspace/source
                name: source
              - description: >-
                  An optional workspace that allows providing a
                  .docker/config.json file for Buildah to access the container
                  registry. The file should be placed at the root of the
                  Workspace with name config.json.
                name: dockerconfig
                optional: true
          duration: 6m 33s
          reason: Succeeded
      - name: apply-manifests
        runAfter:
          - build
        taskRef:
          kind: Task
          name: apply-manifests
        workspaces:
          - name: output
            workspace: shared-workspace
        status:
          completionTime: '2023-06-09T15:12:18Z'
          conditions:
            - lastTransitionTime: '2023-06-09T15:12:18Z'
              message: All Steps have completed executing
              reason: Succeeded
              status: 'True'
              type: Succeeded
          podName: nodejs-test-pipeline-x6dlvv-apply-manifests-pod
          startTime: '2023-06-09T15:11:29Z'
          steps:
            - container: step-apply-manifests
              imageID: >-
                quay.io/openshift/origin-cli@sha256:a14251a1de65fbf338db3bd4f35c16d6dcaaa8d089accb6a60e0a7db42005582
              name: apply-manifests
              terminated:
                containerID: >-
                  cri-o://b02038e3fbe3287a410529be3c49b33f036acff6d64e08d174316e377cb5c801
                exitCode: 0
                finishedAt: '2023-06-09T15:12:17Z'
                reason: Completed
                startedAt: '2023-06-09T15:12:13Z'
          taskSpec:
            params:
              - default: .
                description: The directory in source that contains yaml manifests
                name: manifest_dir
                type: string
            steps:
              - command:
                  - /bin/bash
                  - '-c'
                  - oc apply -f ./pipelines/deployment.yml
                  - oc apply -f ./pipelines/service.yml
                image: 'quay.io/openshift/origin-cli:latest'
                name: apply-manifests
                resources: {}
                workingDir: /workspace/output
            workspaces:
              - name: output
          duration: 49s
          reason: Succeeded
    workspaces:
      - name: shared-workspace
  startTime: '2023-06-09T15:04:32Z'
  taskRuns:
    nodejs-test-pipeline-x6dlvv-apply-manifests:
      pipelineTaskName: apply-manifests
      status:
        completionTime: '2023-06-09T15:12:18Z'
        conditions:
          - lastTransitionTime: '2023-06-09T15:12:18Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: nodejs-test-pipeline-x6dlvv-apply-manifests-pod
        startTime: '2023-06-09T15:11:29Z'
        steps:
          - container: step-apply-manifests
            imageID: >-
              quay.io/openshift/origin-cli@sha256:a14251a1de65fbf338db3bd4f35c16d6dcaaa8d089accb6a60e0a7db42005582
            name: apply-manifests
            terminated:
              containerID: >-
                cri-o://b02038e3fbe3287a410529be3c49b33f036acff6d64e08d174316e377cb5c801
              exitCode: 0
              finishedAt: '2023-06-09T15:12:17Z'
              reason: Completed
              startedAt: '2023-06-09T15:12:13Z'
        taskSpec:
          params:
            - default: .
              description: The directory in source that contains yaml manifests
              name: manifest_dir
              type: string
          steps:
            - command:
                - /bin/bash
                - '-c'
                - oc apply -f ./pipelines/deployment.yml
                - oc apply -f ./pipelines/service.yml
              image: 'quay.io/openshift/origin-cli:latest'
              name: apply-manifests
              resources: {}
              workingDir: /workspace/output
          workspaces:
            - name: output
    nodejs-test-pipeline-x6dlvv-build:
      pipelineTaskName: build
      status:
        completionTime: '2023-06-09T15:11:29Z'
        conditions:
          - lastTransitionTime: '2023-06-09T15:11:29Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: nodejs-test-pipeline-x6dlvv-build-pod
        startTime: '2023-06-09T15:04:56Z'
        steps:
          - container: step-generate
            imageID: >-
              registry.redhat.io/ocp-tools-4-tech-preview/source-to-image-rhel8@sha256:98d8cb3a255641ca6a1bce854e5e2460c20de9fb9b28e3cc67eb459f122873dd
            name: generate
            terminated:
              containerID: >-
                cri-o://590deb452dc3718781be6a9764d7c1d5d5dc8cec927a293af1e8ba862859a229
              exitCode: 0
              finishedAt: '2023-06-09T15:05:42Z'
              reason: Completed
              startedAt: '2023-06-09T15:05:41Z'
          - container: step-build-and-push
            imageID: >-
              registry.redhat.io/rhel8/buildah@sha256:7678ad61e06e442b0093ab73faa73ce536721ae523015dd942f9196c4699a31d
            name: build-and-push
            terminated:
              containerID: >-
                cri-o://2f0e5c821a5ea0ccc36cf3de3c207c2500917e0d0b600580246da5620929a577
              exitCode: 0
              finishedAt: '2023-06-09T15:11:29Z'
              message: >-
                [{"key":"IMAGE_DIGEST","value":"sha256:aa99dca83a26d183e3e0127244d52c81a5eec60ad085909f81e75540b076487e","type":1}]
              reason: Completed
              startedAt: '2023-06-09T15:05:43Z'
        taskResults:
          - name: IMAGE_DIGEST
            type: string
            value: >-
              sha256:aa99dca83a26d183e3e0127244d52c81a5eec60ad085909f81e75540b076487e
        taskSpec:
          description: >-
            s2i-nodejs task clones a Git repository and builds and pushes a
            container image using S2I and a nodejs builder image.
          params:
            - default: latest
              description: The tag of nodejs imagestream for nodejs version
              name: VERSION
              type: string
            - default: .
              description: The location of the path to run s2i from.
              name: PATH_CONTEXT
              type: string
            - default: 'true'
              description: >-
                Verify the TLS on the registry endpoint (for push/pull to a
                non-TLS registry)
              name: TLSVERIFY
              type: string
            - description: Location of the repo where image has to be pushed
              name: IMAGE
              type: string
            - default: >-
                registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
              description: The location of the buildah builder image.
              name: BUILDER_IMAGE
              type: string
            - default: 'false'
              description: Skip pushing the built image
              name: SKIP_PUSH
              type: string
            - default: []
              description: Environment variables to set during _build-time_.
              name: ENV_VARS
              type: array
          results:
            - description: Digest of the image just built.
              name: IMAGE_DIGEST
              type: string
          steps:
            - env:
                - name: HOME
                  value: /tekton/home
              image: >-
                registry.redhat.io/ocp-tools-4-tech-preview/source-to-image-rhel8@sha256:98d8cb3a255641ca6a1bce854e5e2460c20de9fb9b28e3cc67eb459f122873dd
              name: generate
              resources: {}
              script: >
                echo "Processing Build Environment Variables"

                echo "" > /env-vars/env-file

                for var in "$@"

                do
                    echo "$var" >> /env-vars/env-file
                done


                s2i build .
                image-registry.openshift-image-registry.svc:5000/openshift/nodejs:latest
                \

                --as-dockerfile /gen-source/Dockerfile.gen --environment-file
                /env-vars/env-file
              volumeMounts:
                - mountPath: /gen-source
                  name: gen-source
                - mountPath: /env-vars
                  name: env-vars
              workingDir: /workspace/source
            - image: >-
                registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
              name: build-and-push
              resources: {}
              script: >
                buildah bud --storage-driver=vfs --tls-verify=false \
                   --layers -f /gen-source/Dockerfile.gen -t image-registry.openshift-image-registry.svc:5000/hackathon2023-prometheus/trav-reco-ui .

                [[ "false" == "true" ]] && echo "Push skipped" && exit 0

                [[ "false" == "true" ]] && export DOCKER_CONFIG=""

                buildah push --storage-driver=vfs --tls-verify=false \
                  --digestfile /workspace/source/image-digest image-registry.openshift-image-registry.svc:5000/hackathon2023-prometheus/trav-reco-ui \
                  docker://image-registry.openshift-image-registry.svc:5000/hackathon2023-prometheus/trav-reco-ui

                cat /workspace/source/image-digest | tee
                /tekton/results/IMAGE_DIGEST
              securityContext:
                capabilities:
                  add:
                    - SETFCAP
              volumeMounts:
                - mountPath: /var/lib/containers
                  name: varlibcontainers
                - mountPath: /gen-source
                  name: gen-source
              workingDir: /gen-source
          volumes:
            - emptyDir: {}
              name: varlibcontainers
            - emptyDir: {}
              name: gen-source
            - emptyDir: {}
              name: env-vars
          workspaces:
            - mountPath: /workspace/source
              name: source
            - description: >-
                An optional workspace that allows providing a
                .docker/config.json file for Buildah to access the container
                registry. The file should be placed at the root of the Workspace
                with name config.json.
              name: dockerconfig
              optional: true
    nodejs-test-pipeline-x6dlvv-fetch-repository:
      pipelineTaskName: fetch-repository
      status:
        completionTime: '2023-06-09T15:04:56Z'
        conditions:
          - lastTransitionTime: '2023-06-09T15:04:56Z'
            message: All Steps have completed executing
            reason: Succeeded
            status: 'True'
            type: Succeeded
        podName: nodejs-test-pipeline-x6dlvv-fetch-repository-pod
        startTime: '2023-06-09T15:04:32Z'
        steps:
          - container: step-clone
            imageID: >-
              registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:6c3980b3d28c8fb92b17466f5654d5f484ab893f1673ec8f29e49c0d03f8aca9
            name: clone
            terminated:
              containerID: >-
                cri-o://1c0bd1e5b978fa3d98b8bb98ff39472fd007c16eda3cf424435fce532ba74333
              exitCode: 0
              finishedAt: '2023-06-09T15:04:55Z'
              message: >-
                [{"key":"commit","value":"6886767e9ef00d472a214cb9022d1d531ec6cd32","type":1},{"key":"url","value":"https://github.com/natarajbasu/redHatHackathon","type":1}]
              reason: Completed
              startedAt: '2023-06-09T15:04:54Z'
        taskResults:
          - name: commit
            type: string
            value: 6886767e9ef00d472a214cb9022d1d531ec6cd32
          - name: url
            type: string
            value: 'https://github.com/natarajbasu/redHatHackathon'
        taskSpec:
          description: >-
            These Tasks are Git tasks to work with repositories used by other
            tasks in your Pipeline.

            The git-clone Task will clone a repo from the provided url into the
            output Workspace. By default the repo will be cloned into the root
            of your Workspace. You can clone into a subdirectory by setting this
            Task's subdirectory param. This Task also supports sparse checkouts.
            To perform a sparse checkout, pass a list of comma separated
            directory patterns to this Task's sparseCheckoutDirectories param.
          params:
            - description: Repository URL to clone from.
              name: url
              type: string
            - default: ''
              description: 'Revision to checkout. (branch, tag, sha, ref, etc...)'
              name: revision
              type: string
            - default: ''
              description: Refspec to fetch before checking out revision.
              name: refspec
              type: string
            - default: 'true'
              description: Initialize and fetch git submodules.
              name: submodules
              type: string
            - default: '1'
              description: >-
                Perform a shallow clone, fetching only the most recent N
                commits.
              name: depth
              type: string
            - default: 'true'
              description: >-
                Set the `http.sslVerify` global git config. Setting this to
                `false` is not advised unless you are sure that you trust your
                git remote.
              name: sslVerify
              type: string
            - default: ca-bundle.crt
              description: >-
                file name of mounted crt using ssl-ca-directory workspace.
                default value is ca-bundle.crt.
              name: crtFileName
              type: string
            - default: ''
              description: >-
                Subdirectory inside the `output` Workspace to clone the repo
                into.
              name: subdirectory
              type: string
            - default: ''
              description: >-
                Define the directory patterns to match or exclude when
                performing a sparse checkout.
              name: sparseCheckoutDirectories
              type: string
            - default: 'true'
              description: >-
                Clean out the contents of the destination directory if it
                already exists before cloning.
              name: deleteExisting
              type: string
            - default: ''
              description: HTTP proxy server for non-SSL requests.
              name: httpProxy
              type: string
            - default: ''
              description: HTTPS proxy server for SSL requests.
              name: httpsProxy
              type: string
            - default: ''
              description: Opt out of proxying HTTP/HTTPS requests.
              name: noProxy
              type: string
            - default: 'true'
              description: >-
                Log the commands that are executed during `git-clone`'s
                operation.
              name: verbose
              type: string
            - default: >-
                registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:6c3980b3d28c8fb92b17466f5654d5f484ab893f1673ec8f29e49c0d03f8aca9
              description: The image providing the git-init binary that this Task runs.
              name: gitInitImage
              type: string
            - default: /tekton/home
              description: |
                Absolute path to the user's home directory.
              name: userHome
              type: string
          results:
            - description: The precise commit SHA that was fetched by this Task.
              name: commit
              type: string
            - description: The precise URL that was fetched by this Task.
              name: url
              type: string
          steps:
            - env:
                - name: HOME
                  value: /tekton/home
                - name: PARAM_URL
                  value: 'https://github.com/natarajbasu/redHatHackathon'
                - name: PARAM_REVISION
                - name: PARAM_REFSPEC
                - name: PARAM_SUBMODULES
                  value: 'true'
                - name: PARAM_DEPTH
                  value: '1'
                - name: PARAM_SSL_VERIFY
                  value: 'true'
                - name: PARAM_CRT_FILENAME
                  value: ca-bundle.crt
                - name: PARAM_SUBDIRECTORY
                - name: PARAM_DELETE_EXISTING
                  value: 'true'
                - name: PARAM_HTTP_PROXY
                - name: PARAM_HTTPS_PROXY
                - name: PARAM_NO_PROXY
                - name: PARAM_VERBOSE
                  value: 'true'
                - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
                - name: PARAM_USER_HOME
                  value: /tekton/home
                - name: WORKSPACE_OUTPUT_PATH
                  value: /workspace/output
                - name: WORKSPACE_SSH_DIRECTORY_BOUND
                  value: 'false'
                - name: WORKSPACE_SSH_DIRECTORY_PATH
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
                  value: 'false'
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
                - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
                  value: 'false'
                - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
              image: >-
                registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:6c3980b3d28c8fb92b17466f5654d5f484ab893f1673ec8f29e49c0d03f8aca9
              name: clone
              resources: {}
              script: >
                #!/usr/bin/env sh

                set -eu


                if [ "${PARAM_VERBOSE}" = "true" ] ; then
                  set -x
                fi



                if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                  chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                  chmod 400 "${PARAM_USER_HOME}/.gitconfig"
                fi


                if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                  chmod 700 "${PARAM_USER_HOME}"/.ssh
                  chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
                fi


                if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
                   export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
                   if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
                      export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
                   fi
                fi

                CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"


                cleandir() {
                  # Delete any existing contents of the repo directory if it exists.
                  #
                  # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                  # or the root of a mounted volume.
                  if [ -d "${CHECKOUT_DIR}" ] ; then
                    # Delete non-hidden files and directories
                    rm -rf "${CHECKOUT_DIR:?}"/*
                    # Delete files and directories starting with . but excluding ..
                    rm -rf "${CHECKOUT_DIR}"/.[!.]*
                    # Delete files and directories starting with .. plus any other character
                    rm -rf "${CHECKOUT_DIR}"/..?*
                  fi
                }


                if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                  cleandir
                fi


                test -z "${PARAM_HTTP_PROXY}" || export
                HTTP_PROXY="${PARAM_HTTP_PROXY}"

                test -z "${PARAM_HTTPS_PROXY}" || export
                HTTPS_PROXY="${PARAM_HTTPS_PROXY}"

                test -z "${PARAM_NO_PROXY}" || export
                NO_PROXY="${PARAM_NO_PROXY}"


                /ko-app/git-init \
                  -url="${PARAM_URL}" \
                  -revision="${PARAM_REVISION}" \
                  -refspec="${PARAM_REFSPEC}" \
                  -path="${CHECKOUT_DIR}" \
                  -sslVerify="${PARAM_SSL_VERIFY}" \
                  -submodules="${PARAM_SUBMODULES}" \
                  -depth="${PARAM_DEPTH}" \
                  -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
                cd "${CHECKOUT_DIR}"

                RESULT_SHA="$(git rev-parse HEAD)"

                EXIT_CODE="$?"

                if [ "${EXIT_CODE}" != 0 ] ; then
                  exit "${EXIT_CODE}"
                fi

                printf "%s" "${RESULT_SHA}" > "/tekton/results/commit"

                printf "%s" "${PARAM_URL}" > "/tekton/results/url"
              securityContext:
                runAsNonRoot: true
                runAsUser: 65532
          workspaces:
            - description: >-
                The git repo will be cloned onto the volume backing this
                Workspace.
              name: output
            - description: >
                A .ssh directory with private key, known_hosts, config, etc.
                Copied to

                the user's home before git commands are executed. Used to
                authenticate

                with the git remote when performing the clone. Binding a Secret
                to this

                Workspace is strongly recommended over other volume types.
              name: ssh-directory
              optional: true
            - description: >
                A Workspace containing a .gitconfig and .git-credentials file.
                These

                will be copied to the user's home before any git commands are
                run. Any

                other files in this Workspace are ignored. It is strongly
                recommended

                to use ssh-directory over basic-auth whenever possible and to
                bind a

                Secret to this Workspace over other volume types.
              name: basic-auth
              optional: true
            - description: >
                A workspace containing CA certificates, this will be used by Git
                to

                verify the peer with when fetching or pushing over HTTPS.
              name: ssl-ca-directory
              optional: true
